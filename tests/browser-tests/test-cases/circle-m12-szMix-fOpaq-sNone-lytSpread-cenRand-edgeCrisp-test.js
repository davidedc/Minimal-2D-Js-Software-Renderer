/**
 * TEST SUMMARY:
 * =================
 *
 * Description: Tests rendering of 12 circles with no strokes, only fills, precise alignment, and random parameters/positions.
 *
 *
 * ---
 *
 * | Facet                  | Value          | Reason
 * |------------------------|----------------|-----------------------------------------------------------------------------------------------------
 * | Shape category         | circles        | The test exclusively renders circles using `ctx.fillCircle()`.
 * | Count                  | multi-12       | The test draws 12 separate circle instances in its standard (non-performance) mode.
 * | SizeCategory           | mixed          | The radius is randomized in the range [8, 42), which spans the XS (5-15), S (16-39), and M (40-79) size categories.
 * | FillStyle              | opaque         | Fill colors are generated by `getRandomColor(200, 255)`, ensuring they are fully opaque.
 * | StrokeStyle            | none           | The test is designed to be "fill-only," and `strokeWidth` is explicitly set to 0.
 * | StrokeThickness        | none           | Consistent with `StrokeStyle` being `none`.
 * | Layout                 | spread         | The 12 circles are positioned independently and randomly across a wide area of the canvas.
 * | CenteredAt             | random         | Each circle's center coordinates are randomized within a large sub-region of the canvas.
 * | EdgeAlignment          | crisp          | The test explicitly uses `adjustDimensionsForCrispStrokeRendering()` to ensure sharp rendering.
 * | Orientation            | N/A            | Not applicable for circles, which are rotationally symmetrical.
 * | ArcAngleExtent         | N/A            | Not applicable for circles.
 * | RoundRectRadius        | N/A            | Not applicable for circles.
 * | ContextTranslation     | none           | The rendering context is not translated (`ctx.translate()` is not used).
 * | ContextRotation        | none           | The rendering context is not rotated (`ctx.rotate()` is not used).
 * | ContextScaling         | none           | The rendering context is not scaled (`ctx.scale()` is not used).
 * | Clipped on shape       | none           | No clipping region is defined or applied in this test.
 * | Clipped on shape count | n/a            | Not applicable as there is no clipping.
 * | Clipped on shape arrangement | n/a      | Not applicable as there is no clipping.
 * | Clipped on shape size  | n/a            | Not applicable as there is no clipping.
 * | Clipped on shape edge alignment | n/a   | Not applicable as there is no clipping.
 *
 * ---
 *
 * UNCAPTURED ASPECTS IN FILENAME / FACETS ABOVE:
 * ----------------------------------------------
 * The specific randomization ranges for radius and fill color are not captured. The radius is randomized within [8, 42), spanning XS, S, and M size categories. The fill color is a random opaque color.
 *
 */

/**
 * @fileoverview Test definition for multiple precise fill-only circles.
 */

// Helper functions getRandomColor, adjustDimensionsForCrispStrokeRendering, 
// calculateCircleTestParameters are available from test-helper-functions.js


/**
 * Draws multiple precise, fill-only random circles.
 *
 * @param {CanvasRenderingContext2D | CrispSwContext} ctx The rendering context.
 * @param {number} currentIterationNumber The current test iteration (for seeding via RenderTest).
 * @param {?number} instances Optional: Number of instances to draw. For visual regression (instances is null/0), 12 circles are drawn.
 * @returns {?{logs: string[]}} Logs for single-instance mode, or null for performance mode.
 */
function drawTest(ctx, currentIterationNumber, instances = null) {
    const isPerformanceRun = instances !== null && instances > 0;
    const numToDraw = isPerformanceRun ? instances : 12; // Original test draws 12

    let logs = [];

    const canvasWidth = ctx.canvas.width;
    const canvasHeight = ctx.canvas.height;

    if (canvasWidth % 2 !== 0 || canvasHeight % 2 !== 0) {
        const msg = 'Warning: Canvas dimensions are not even. Crisp rendering might be affected.';
        if (!isPerformanceRun) logs.push(msg);
    }

    for (let i = 0; i < numToDraw; i++) {
        // SR calls 1-4 happen inside calculateCircleTestParameters
        const params = calculateCircleTestParameters({
            canvasWidth,
            canvasHeight,
            minRadius: 8,
            maxRadius: 42,
            hasStroke: false,        // No stroke
            randomPosition: true,    // Enable random positioning
            marginX: 60,
            marginY: 60
        });
        let { centerX, centerY, radius, finalDiameter, atPixel } = params;
        
        // SR Call 5: fillColor (opaque or semi-transparent, original used palette indexing)
        const fillColorObj = getRandomColor(200, 255); 

        const fillColorForRender = { r: fillColorObj.r, g: fillColorObj.g, b: fillColorObj.b, a: fillColorObj.a };

        let drawCenterX = centerX;
        let drawCenterY = centerY;
        
        ctx.fillCircle(
            drawCenterX, drawCenterY, radius, 
            fillColorForRender.r, fillColorForRender.g, fillColorForRender.b, fillColorForRender.a
        );

        if (!isPerformanceRun) { 
            logs.push(
                `PreciseNoStrokeCircle ${i+1}: center=(${centerX.toFixed(1)},${centerY.toFixed(1)}), r=${radius.toFixed(1)}, diamAdj=${finalDiameter}, initialCenterType=${atPixel ? 'pixel' : 'grid'}`
            );
        }
    }

    if (isPerformanceRun) {
        return null; 
    }
    return { logs }; 
}

// Register the test
registerHighLevelTest(
    'circle-m12-szMix-fOpaq-sNone-lytSpread-cenRand-edgeCrisp-test',
    drawTest,
    'circles',
    {
        //compare: { swTol: 0, refTol: 0, diffTol: 0 } // Default visual comparison
    },
    {
        title: 'Multiple Precise Fill-Only Circles (Random Params & Pos)',
        description: 'Tests rendering of 12 circles with no strokes, only fills, precise alignment, and random parameters/positions.',
        displayName: 'Perf: 12 Precise NoStroke RandCircles'
    }
); 
